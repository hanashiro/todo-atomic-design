import type mongo from '@server/db/mongo';
import { Model } from 'mongoose';
import { I{{name}} } from './{{camelCase name}}.dto';
import { {{name}} } from './{{camelCase name}}.entity';
import { I{{name}}Repository } from './{{camelCase name}}.repository.abstract';
import { {{name}}Model } from './{{camelCase name}}.schema';

export class {{name}}Repository implements I{{name}}Repository {
    #model: Model<{{name}}>;
    #dbClient: typeof mongo;

    constructor(schema: Model<{{name}}>, dbClient: typeof mongo) {
        this.#model = schema;
        this.#dbClient = dbClient;

        this.#dbClient.connect();
    }

    async create({{camelCase name}}: I{{name}}): Promise<{{name}}> {
        throw new Error('Method not implemented.');
    }
    async findById(id: string): Promise<{{name}} | null> {
        throw new Error('Method not implemented.');
    }
    async list(): Promise<{{name}}[]> {
        throw new Error('Method not implemented.');
    }
    async update({{camelCase name}}: Partial<{{name}}>): Promise<{{name}} | null> {
        throw new Error('Method not implemented.');
    }
    async delete(id: string): Promise<{{name}} | null> {
        throw new Error('Method not implemented.');
    }
}
